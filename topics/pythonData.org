WORK IN PROGRESS - Don't use for now. 
* Data Handling in Python
  For a long time data handling and graph production in python lagged behind that of R. Data were collected in comma or tab separated ([[https://en.wikipedia.org/wiki/Comma-separated_values][CSV]]) formats or often in [[https://docs.python.org/3/library/pickle.html][pickle]] files. Pickled data was converted to a binary representation and had to be converted back to be read. These issues made it harder to use python in an interactive and interpreted environment for data analyis and many workers in psychology would collect their data with experiments coded in python (or other languages), and then use R as the language for statistical testing.

  However, over the last few years the scientific python community has expanded its options for both graphing and data handling markedly, and working entirely in python is increasingly a viable option. The most widely used python library for handling data is [[https://pandas.pydata.org/][Pandas]]. In many respects it has a similar look and feel to the =data.frame= style of data analysis used in R. However, there are definite syntactic and implementation differences. While a familiarity with R and data.frames is a good base for beginning to use Pandas there will remain a lot of concrete specfics to learn to use python effectively. In this topic a few of the pandas basics are demonstrated. In addition to the illustrations here, there are numerous online tutorials and blogs that explain pandas in more detail, and with many more examples.
** Some additional sources  
*** Pandas Books
    - [[https://www.chapters.indigo.ca/en-ca/books/python-for-data-analysis-data/9781449319793-item.html][Python for Data Analysis]] - This book is available for online reading to University of Waterloo students.
*** Blogs
    - [[https://pandas.pydata.org/pandas-docs/stable/getting_started/tutorials.html][Community Tutorials]]
    - [[https://www.learnpython.org/en/Pandas_Basics][Learn Python]]
** Data handling in Python
*** Pandas
    How to get Pandas?
    1. [[https://docs.continuum.io/anaconda/][Anaconda]] (Conda) - you will see this in a lot of documentation. This is a collection of packages for python that are curated to work well together and allow you to set up virutal environments (which protects your projects and their differing requirements from leading to conflicts with each other). Using =conda= is not hard, but it is another took, and it has its own learning curve, so it will not be used here. If you find yourself using python regularly and you are comfortable with how to install and use software and packages then I encourage you to read more Anaconda and decided if it is a python solution that will work for you.
    2. Xubuntu stable ~sudo apt-get install python3-pandas~.
    3. Pip (PyPI) ~pip install pandas~

    To try and get all our python packages from one source (and thereby reduce our chance for conflicts) we will use the =pip= method as that will work well with our subsequent installation of the =psychopy= package.
*** Interactve Pandas
    Python is an interpreted language. You can use Python from an interpreter much as you used R in an R console (or RStudio).
**** Getting Your Data Into Python
     Before you can get data into python, you have to get data.

     There are a large number of sources for data online that you can use to explore different tools and analyses.
     1. [[https://openpsychometrics.org/_rawdata/][Open Psychometrics]]
     2. [[https://www.apa.org/research/responsible/data-links][Data Links from the APA]]
     3. [[https://data.world/datasets/psychology][Data World]]
     4. [[https://www.kaggle.com/tags/psychology][The Kaggle Competition]]
	Kaggle competitions allow you to make data analysis a competitive sport.

     For demonstration purposes we will get data from the Open Psychometrics project (I am using the humor questi. You could just go to the website and right click and download, but you could also use python to get the data. There are many methods for this and the one used here came from this [[https://www.simplifiedpython.net/python-download-file/][online post.]]

     You will have to ~pip install requests~ to get the requests library

     Then you will want to be in the directory where you want the file to download. I am using a ~:session:~ in order to allow variables to persist across babel code blocks. 

     
     #+begin_src python :session: *Psych363* 
       import requests
       url = "http://openpsychometrics.org/_rawdata/HSQ.zip"
       r = requests.get(url)
       filename = url.split('/')[-1] # -1 gets us the last item of a list, in this case the filenamel
       with open(filename,'wb') as output_file:
	   output_file.write(r.content)
     #+end_src

     This file is a "zip" file. For a zip file the data have been compressed to save space. There are many other compression types available. Tar is fairly common. Rar is rare. Python also has facilities to unzip files.  Why bother using all these tools rather than doing everything manually? Well, for one thing you could script it. Why waste your time clicking random buttons. Let the computer do the work. 

     #+begin_src python :session: *Psych363*
       import zipfile
       with zipfile.ZipFile('./HSQ.zip', 'r') as zip_ref:
	   zip_ref.extractall('.') ; # what does "." mean in this context?
     #+end_src

     #+begin_src python
    You have to import pandas to use it. 
    #+begin_src python :session *Psych363* :results value
      import pandas as pd
      dpd = pd.read_csv("./HSQ/data.csv")
      dpd.columns.values
    #+end_src

    #+RESULTS:
    | Q1 | Q2 | Q3 | Q4 | Q5 | Q6 | Q7 | Q8 | Q9 | Q10 | Q11 | Q12 | Q13 | Q14 | Q15 | Q16 | Q17 | Q18 | Q19 | Q20 | Q21 | Q22 | Q23 | Q24 | Q25 | Q26 | Q27 | Q28 | Q29 | Q30 | Q31 | Q32 | affiliative | selfenhancing | agressive | selfdefeating | age | gender | accuracy |
**** Repeat the same inquiries as above, but with Pandas.
     #+begin_src python :session *P363* 
     len(dpd['Q1'])
     #+end_src

     #+RESULTS:
     : 1071
      
     #+begin_src python :session *P363*
     dpdmg = dpd.copy()
     dpdmg = dpdmg[dpdmg['gender'].isin([1,2])]
     len(dpdmg['Q1'])
     #+end_src

     #+RESULTS:
     : 1058


     What happens if you just select with ~in~? You keep the same number of rows, because you replace the ineligible data with NaNs (not a number). 


**** Functional Styles versus Object Orientation
     Python is an object oriented language. Pandas creates a data.frame object (intended to mimic R), but it is not the same thing, and while most of the commands are achievable in either, they are not the same. The *dot* shows you we are accessing either an attribute or a method of an object. 
